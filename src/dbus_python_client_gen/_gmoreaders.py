# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

"""
Code for generating classes suitable for invoking dbus-python methods.
"""

from ._errors import DPClientGenerationError
from ._errors import DPClientRuntimeError


def gmo_reader_builder(spec):
    """
    Returns a function that builds a method interface based on 'spec'.
    This method interface is a simple one to return the values of
    properties from a table generated by a GetManagedObjects() method call
    for the object that implements the given interface.

    Usage example:

    * spec is an xml specification for an interface in the format returned
    by the Introspect() method.
    * table is the dict associated with a particular object returned by the
    GetManagedObjects() method.

    >>> builder = gmo_reader_builder(spec)
    >>> Filesystem = types.new_class("Filesystem", bases=(object,), exec_body=builder)
    >>> fs = Filesystem(table)
    >>> fs.Pool()

    :param spec: the interface specification
    :type spec: Element
    """

    try:
        interface_name = spec.attrib['name']
    except KeyError as err: # pragma: no cover
        raise DPClientGenerationError("No name found for interface.") from err

    def builder(namespace):
        """
        The property class's namespace.

        :param namespace: the class's namespace
        """

        def build_property(name):
            """
            Build a single property getter for this class.

            :param str name: the property name

            :returns: the value of the property
            :rtype: object
            """

            def dbus_func(self):
                """
                The property getter.
                """
                # pylint: disable=protected-access
                try:
                    return self._table[interface_name][name]
                # initializer ensures that interface name is in table and
                # name must be in table for interface because it was derived
                # from the introspection information, so this should never fail.
                except KeyError as err: # pragma: no cover
                    raise DPClientRuntimeError(
                       "No entry found for interface %s and property %s" %
                       (interface_name, name)
                    ) from err

            return dbus_func

        for prop in spec.findall('./property'):
            name = prop.attrib.get('name')
            namespace[name] = build_property(name)

        def __init__(self, table):
            """
            The initalizer for this class.
            """
            if interface_name not in table:
                raise DPClientRuntimeError(
                   "Object does not implement interface %s" % interface_name
                )
            self._table = table # pylint: disable=protected-access

        namespace['__init__'] = __init__

    return builder
